public func day23() {
//    print(part1(input: input))
    print(part2(input: input))
}

private func part1(input: String) -> Int {
    var grid = Grid(lines: input.split(whereSeparator: \.isNewline)
                        .map { line in line.map { $0 }} )
        .removeAll(where: { $0.val == "." })

    print("== Initial State ==")
    plot(grid)
    print("")
    var directions: [Direction] = [.up, .down, .left, .right]
    for round in 1...10 {
        let roundDuration = ContinuousClock().measure {
            let moves = grid.moves(directions: directions)
            grid = Grid(data: grid.data.map { elf in
                moves[elf] ?? elf
            })
            directions.shift()
        }

        print("Round \(round) duration: \(roundDuration)")
//        print("== End of Round \(round) ==")
//        plot(grid)
//        print("")
    }
    let totalTiles = grid.data.map(\.x).range().count * grid.data.map(\.y).range().count
    return totalTiles - grid.data.count
}

private func part2(input: String) -> Int {
    var grid = Grid(lines: input.split(whereSeparator: \.isNewline)
                        .map { line in line.map { $0 }} )
        .removeAll(where: { $0.val == "." })
    var previous: Grid<Character>?
    var directions: [Direction] = [.up, .down, .left, .right]
    var lastRound: Int?
    for round in 1... {
        previous = grid
        let roundDuration = ContinuousClock().measure {
            let moves = grid.moves(directions: directions)
            grid = Grid(data: grid.data.map { elf in
                moves[elf] ?? elf
            })
            directions.shift()
        }

        print("Round \(round) duration: \(roundDuration)")
        if previous == grid {
            lastRound = round
            break
        }
    }
    return lastRound!
}

private extension Grid {
    func moves(directions: [Direction]) -> [Point: Point] {
        var proposedMoves: [(elf: Point, dir: Direction)] = []
        let duration = ContinuousClock().measure {
        proposedMoves = self.data
            .compactMap { elf -> (elf: Point, dir: Direction)? in
                let neighbours = self.neighbours(of: elf)
                guard !neighbours.values.flatMap({ $0 }).isEmpty else {
                    return nil
                }
                return directions
                    .first(where: { direction in neighbours[direction]!.isEmpty } )
                    .map { (elf: elf, dir: $0) }
            }
        }
        print("ProposedMoves: \(duration)")
        let filteredMoves = Dictionary(grouping: proposedMoves
                                        .map { elf, dir in (from: elf, to: elf.move(in: dir)) },
                                       by: \.to)
            .map(\.value)
            .compactMap { moves -> (from: Point, to: Point)? in
                if moves.count > 1 {
                    return nil
                } else {
                    return moves.first!
                }
            }
        return Dictionary(uniqueKeysWithValues: filteredMoves)
    }

    func neighbours(of point: Point) -> [Direction: [Point]] {
        let neighbours = data.filter { $0.distance(to: point) <= 2 }
        return [
            .up: neighbours.filter { $0.y == point.y - 1 },
            .down: neighbours.filter { $0.y == point.y + 1 },
            .left: neighbours.filter { $0.x == point.x - 1 },
            .right: neighbours.filter { $0.x == point.x + 1}
        ]
    }
}

/*
private let test = """
.....
..##.
..#..
.....
..##.
.....
"""
 */

private let test = """
....#..
..###.#
#...#.#
.#...##
#.###..
##.#.##
.#..#..
"""

private let input = """
#.#.#.#.......##.#.####......#...###.#.#..#.#.##.#.#...#...###.#.######...
.##.###.###.#...###.#.........#...##.##.#.#...#...##.....##.##.#.#.#...#.#
#####.#....##..#.##.####....##.###.....###.##..#..##..#.#.#...###.##.#...#
..#..######..##.##..##...###.#...#.####.#.##.##...###...##...#.#...#.#..#.
####..##.##.#.#....#.#.#.....#######..#...#####.##....#.##..##.#.###.#.###
##..###....##..#.##.###.#####.#.#..##..#......##.##..###.##.#.####.#.#.###
..###...#.#.###.##.#.#..#...##.#..#.###.##..#...#..###...#.####.#.#...##.#
...#.#....##.##.......#.#...#.......#.#....#..###...##...###..#...#.###.##
..#.....###..##.#..##.#..##.#.##.#.#.#.#.###...##.####.#.##.##...#.####..#
##.##.######..##...#...#.#.#.#.....#.#.#..#..#....##..#.....#.#.#...#...#.
#####.#.#.###..##.##.#...##.#.#.#.####....#..#.####.#####.#.###...#.###.#.
.#.###.#.###..#..#.#.#########...###.......##..#..##.#......####...#......
###..........##...#.##.#..#.###.#..####.###.#.###.##..##..#####....####..#
..#.##.....####.#..#.##.##...###.#.###.#.#.######..##.#.######....#..##..#
#....#####.####..####..###.####..#.....####....#.###.###..#...#.###....#..
##..#..#..#....##...#..#.#..#..........##.#.###..#.##.#...#...#...##..##..
#.##..##.#....#.#.#..#....##.#....##.##.#..###.#...##.##....#..#####.###.#
..###......#.#.##.##...##...#####..##..#.#..#..###..#.#.#.###.#.###.######
#.#..#......#.#.##.###.###...#..###..#.#.#.##.##.###...##..#.##.....#..###
#..#....#.##..#.#.#..#.####.###.###.##..#.##########...#######..#######...
.#....####.##.#..##......#...##.##..####....###....##.##.###.##.#.#####.#.
###....###..####..#.##..#...#.#.###......#.#........###..#.#..##....#..###
.#..#.#..#.#####..##..###..#..####.###.#..#.##..#..###.......###.###...#.#
##.#..##..##.#...#...#.##........#..####.##.##.##.###..#..##.##.#...##.###
.#...###.....##.#.#....#..#.##.##.#.#...#..######.###...##.#.##...#...###.
..#..#..##.##.#.........###..#..###.....#..##.##..#.###..##.###.####..##..
..#...###...##.#.##......###.####.##..#...#.#...###.#.##..#...#.##.###.##.
###.#.#.....##.....###...####.#...##.#.######.##...#..##....#......##.....
.###........#.#...###.###.#..#.#.#.#.###.#...##.###.......#.##.#.###...#.#
....###...##.##.#...##..###..#.##......#.########...##.##.##.#...#.###....
###.##.#.#..##..##........#.#.....##.##.#...#..#.####....#..##.##.###...#.
##..#.#..#..###..##...##.#.#.###.####...#.#####..##..###..#..#..########..
####.##.##..####.#..#.#....##.##..#....#.#..#...####.#.#..####..#.#...##..
##..###.#..####....#.#.#.####...#..####...###.####...#.#.#.###.##.##.####.
#........#..##.####...##..#.#.#.##.###..#..####..##..#...##.#.##.#.#....##
#.#...#.####.#..#.##.##.....#.##...##.#..#####..####.#####..#...##...#...#
####.......#.#.##.###.#.#.####.#.#......#.#..####..###.#........#.##.#....
....###.##..##..###.#......#####.##.#....##.##...#..#.###.##.##...#......#
###....##..#.#..#...##..#.#.###.##.#.....####.##.#.#..#..##.#.##.###...###
#.######.###.##...##.##..#.#####.#.#.#..##..#.#.#..#.#####.#..#..#.#.###.#
..##.#####.#.##...#...##.#.#..##..##....####..###..#..##.....#.#####.##...
###..####..#.#####.#...#.###.#.##..##.##...#.##.###.#.##...##..#######...#
.#####.#......#...###.###.###....#.#.....####.#.#..##.#.#.....##...###...#
..##.....#.##....##......#.##....#..#.#..#...#.###.###.##.###.#.#..##...#.
.#...#.#..##.#....##.#.##.##..#.#.#...##..##.#..#..###...##...#..#..###...
...#.#...#..#.#..#.......##.#.##.#######..#..#.###.#....###.##...#..##..##
...######.#.###..#...#.#.#...#..#....#..#.###....#.#..#...##..####.#..#.#.
..#####.#..#.##.#.#..#.#.###.#.#....#.##.##.#...#..#.###..#..#..#..#.##...
..##.#.#..#...##.......#..#...#.##.#.....#..#####.###....##.##.###.#.#..##
#..###...#.##..###.........###..#..###.#.#..#..#..#...####.#.##.#....##.#.
###..##.....#.#.#...#...#..#.#....###.###.#####.###.###.##.#..##.#.#.###..
###.#.#.#.##.##.##..#...#.##.#..#.###..###.....#.....#.#.#.####.#.##..#.##
#..##.....#.######.#...###.#.##.#..#.##...#.####....#.....####.#..##...##.
#.......#.....#..###.#.##.##...##..#.####..##..#.#..##...#..####.#..##....
...#...#.#..###.#....#.#.##.##.#...###..######.......#####......#.....#..#
..###.###.###..#.#.##..##.#.....###...##.###.#...##..#..#..##..#..########
..#.....#..#...###.##.#.#.###...#####.#..#.#.###.##.##.#...##.#.####.....#
......##.#.#.#..#..#..#..##..##.#..##########......#..##...#.###.....#..#.
...#..#.#.#######....#....#..#.....#...#...#######.#..#..####.####..##..##
#..##.##..###.#.###.#...##.#.##...##.####..####.###..#...##.#.##..#######.
#..#..#.##..##.#..#..#...##....#.#######..#..#.#..###..#......#.##.#####..
.#.#..#...#..##......#.#.#.##..#..##.#....###.#.###.##.####...#...#.....#.
#.#.#.....#..######.####.##.#.####.#####...#####...###..##....##.#..#.##..
.#..###.##.###..##...###.##....####.##...###..#....##.##...#.#..#.##....##
.#....#...##.#######.#..#.....####....#..#.#..##....##..#######.####.###.#
#####.##.....#.#........##.####...#.##.##..##..####...#.####.###.#....###.
#.#######.##......#..##.##.##..##...#.####....###.#...........##.##.#.....
##.####..#.#.#....#....#.####..#.#.#...######.#.###.##..#.......###...#.##
#.#.#.#..#...#.##..##..#...##.#........##..#.#.###..#.###..###..#.####.#..
..#..##.#.#..######.###.##.##.#####.###....##......#.#.#.#.##.#..##..#.##.
.#...#..#####.#..###..#.####.##.......#...#..#..#..#..#...##.#.#.###..#..#
#..##.#..#....###.........###..#..##...#....####.#....#..###.#.#..##.##.#.
##.##..#.#.#.###.#....###...##...##...##.##.##..#.#...##....#.#######...##
#..#.#.#.#######....#..#.#....#.#.##.....#.####...####.#.####.#.#..#...#.#
"""
