import Foundation

public func day17() {
    //print(part1(input: input))
    print(part2(input: input))
}

private func part1(input: String) -> Int {
    let gusts = input.map { Push(rawValue: String($0))! }
    let rocks = rocks
        .split(separator: "\n\n")
        .map(parse(string:))
    let state = State(gusts: gusts, fallingRocks: rocks).simulate(count: 2022)
    return state.height
}

private func part2(input: String) -> Int {
    let gusts = input.map { Push(rawValue: String($0))! }
    let rocks = rocks
        .split(separator: "\n\n")
        .map(parse(string:))
    let state = State(gusts: gusts, fallingRocks: rocks).simulate(count: 1_000_000_000_000)
    return state.height
}

private struct State {
    let restingRocks: Set<Rock>
    let gusts: [Push]
    let fallingRocks: [Rock]
    let extraHeight: Int

    init(restingRocks: Set<Rock>? = nil, gusts: [Push], fallingRocks: [Rock], extraHeight: Int = 0) {
        // Add the floor as the initial state
        if let restingRocks,
            restingRocks.count > 0 {
            // Optimize this so that it's only the topmost layers
            let sorted = restingRocks.sorted(by: { $0.map(\.y).min()! < $1.map(\.y).min()! }).prefix(30)
            let toMove = -sorted.flatMap { $0.map(\.y) }.min()!
            let pushed = sorted.map { move(rock: $0, diff: Position(x: 0, y: toMove)) }
            self.restingRocks = Set(pushed)
            self.extraHeight = extraHeight + toMove
        } else {
            self.restingRocks = restingRocks ?? Set([(0..<7).map { x in Position(x: x, y: 0) }])
            self.extraHeight = extraHeight
        }
        self.gusts = gusts
        self.fallingRocks = fallingRocks
    }

    var height: Int {
        return extraHeight + -restingRocks.flatMap { $0.map(\.y) }.range().lowerBound
    }

    func simulate(count: Int) -> Self {
        let cycle = self.findCycle()
        // Move forward to cycle-start
        let state = (0..<cycle.start).reduce(self) { prev, _ in prev.next() }
        let cyclesToCalculate = Int(floor(Double(count-cycle.start)/Double(cycle.length)))
        let calculatedHeight = cyclesToCalculate*cycle.heightAdded
        let roundsToSimulateAtEnd = count - cyclesToCalculate * cycle.length - cycle.start
        let stateAfterCalculation = Self(
            restingRocks: state.restingRocks,
            gusts: state.gusts,
            fallingRocks: state.fallingRocks,
            extraHeight: state.extraHeight + calculatedHeight
        )
        return (0..<roundsToSimulateAtEnd).reduce(stateAfterCalculation) { prev, _ in prev.next() }
    }

    typealias Cycle = (start: Int, length: Int, heightAdded: Int)
    func findCycle() -> Cycle {
        var heightChanges: [Int] = []
        var state = self

        for iteration in (1...) {
            let next = state.next()
            heightChanges.append(next.height - state.height)
            state = next
            if iteration % 100 == 0 {
                print("Iteration: \(iteration)")
                if let cycle = findCycle(heightChanges: heightChanges, repetitionLength: 50) {
                    return cycle
                }
            }
        }

        func findCycle(heightChanges: [Int], repetitionLength: Int) -> Cycle? {
            let lastChanges = heightChanges.suffix(repetitionLength)

            let repetitions = (0..<(heightChanges.count-repetitionLength)).filter { start in
                heightChanges[start...].prefix(repetitionLength) == lastChanges
            }
            guard repetitions.count > 1 else { return nil }
            return (
                start: repetitions[0],
                length: repetitions[1] - repetitions[0],
                heightAdded: heightChanges[repetitions[0]..<repetitions[1]].sum
            )
        }
        fatalError()
    }

    func next() -> Self {
        let obstacles = restingRocks.flatMap { $0 }
        var modifiedFallingRocks = fallingRocks
        var next = modifiedFallingRocks.shift()
        var modifiedGusts = gusts

        let minY = obstacles.map(\.y).min()!
        let moves = 4 + next.map(\.y).max()! - minY
        next = move(rock: next, diff: Position(x: 0, y: -moves))

        // run through the fall/push loop until `next` is resting
        while true {
            let gust = modifiedGusts.shift()
            var pushed = move(rock: next, push: gust)
            if pushed.contains(where: { obstacles.contains($0) }) {
                pushed = next
            }
            let fallen = move(rock: pushed, push: .down)
            if fallen.contains(where: { obstacles.contains($0) }) {
                next = pushed
                break
            } else {
                next = fallen
            }
        }

        return Self(
            restingRocks: restingRocks.union([next]),
            gusts: modifiedGusts,
            fallingRocks: modifiedFallingRocks,
            extraHeight: extraHeight
        )
    }
}

private typealias Rock = [Position]

private func parse(string: Substring) -> Rock {
    string.split(whereSeparator: \.isNewline)
        .enumerated()
        .flatMap { y, line in
            line.enumerated().filter { _, char in char == "#" }
                .map(\.0)
                .map { Position(x: $0, y: y) }
        }
}

private func move(rock: Rock, push: Push) -> Rock {
    let diff: Position
    switch push {
    case .left:
        diff = Position(x: -1, y: 0)
    case .right:
        diff = Position(x: 1, y: 0)
    case .down:
        diff = Position(x: 0, y: 1)
    }
    return move(rock: rock, diff: diff)
}

private func move(rock: Rock, diff: Position) -> Rock {
    let moved = rock.map { pos in
        pos.move(diff: diff)
    }
    let validXValues = 0..<7
    if moved.map(\.x).allSatisfy({ validXValues.contains($0) }) {
        return moved
    } else {
        return rock
    }
}

enum Push: String, RawRepresentable {
    case left = "<"
    case right = ">"
    case down = "____"
}

let rocks = """
  ####

  .#.
  ###
  .#.

  ..#
  ..#
  ###

  #
  #
  #
  #

  ##
  ##
"""

private let test = """
>>><<><>><<<>><>>><<<>>><<<><<<>><>><<>>
"""

private let input = """

"""
