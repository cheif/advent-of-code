import Shared

public func day14() {
//    print(part1(input: input))
    // 25218 is too low
    print(part2(input: input))
}

private func part1(input: String) -> Int {
    let rocks = parseRocks(input)
    let initialState = State(rocks: Set(rocks), fallingSand: Point(x: 500, y: 0))
    var next: State? = initialState
    var states: [State] = []
    while next != nil {
        states.append(next!)
        next = next!.next()
        if states.count > 100_000 {
            break
        }
    }
    print("States count: \(states.count)")
    let (xRange, yRange) = states.last!.ranges
    for state in states.suffix(1) {
        print("\nState:")
        print(state.description(in: xRange, yRange: yRange))
    }
    return states.last!.restingSand.count
}

private func part2(input: String) -> Int {
    let rocks = Set(parseRocks(input))
    let initialState = State(rocks: rocks, fallingSand: Point(x: 500, y: 0), floor: true)
    var next: State? = initialState
    var iterations = 0
    print("Rocks: \(rocks.count)")
    while next != nil {
        iterations += 1
        if next!.restingSand.contains(Point(x: 500, y: 0)) {
            break
        }
        if iterations % 1_000 == 0 {
            next = measure("Calculate next: \(iterations)") { next!.next() }
            print("RestingSand: \(next!.restingSand.count)")
            print("Surface: \(next!.surface.count)")
        } else {
            next = next!.next()
        }
        if iterations >= 100_000 {
            break
        }
    }
    print("Iterations count: \(iterations)")
    let state = next!
    var (xRange, yRange) = state.ranges
    xRange = 450...550
//    for state in states.suffix(1) {
    print("\nState:")
    print(state.description(in: xRange, yRange: yRange))
    print(state.surface(in: xRange, yRange: yRange))
    //    }
    return state.restingSand.count
}

private struct State {
    let rocks: Set<Point>
    let fallingSand: Point?
    let previousFallingSands: [Point]
    let restingSand: Set<Point>
    let surface: Set<Point>
    let floor: Bool

    init(
        rocks: Set<Point>,
        fallingSand: Point? = nil,
        previousFallingSands: [Point] = [],
        restingSand: Set<Point> = Set(),
        surface: Set<Point>? = nil,
        floor: Bool = false
    ) {
        self.rocks = rocks
        self.fallingSand = fallingSand
        self.previousFallingSands = previousFallingSands
        self.restingSand = restingSand
        self.floor = floor
        if let surface {
            self.surface = surface
        } else {
            // Calculate surface
            self.surface = rocks
        }
    }

    var ranges: (ClosedRange<Int>, ClosedRange<Int>) {
        let allPoints = rocks.union([fallingSand].compactMap { $0 }).union(restingSand)
        let xRange = (allPoints.map(\.x).min()!)...(allPoints.map(\.x).max()!)
        let yRange = 0...(allPoints.map(\.y).max()!)
        return (xRange, yRange)
    }

    func description(in xRange: ClosedRange<Int>, yRange: ClosedRange<Int>) -> String {
        let rows = yRange.map { y in
            xRange.map { x in
                let point = Point(x: x, y: y)
                if rocks.contains(point) {
                    return "#"
                } else if fallingSand == point {
                    return "+"
                } else if restingSand.contains(point) {
                    return "o"
                } else {
                    return "."
                }
            }.joined()
        }
        return rows.joined(separator: "\n")
    }

    func surface(in xRange: ClosedRange<Int>, yRange: ClosedRange<Int>) -> String {
        let rows = yRange.map { y in
            xRange.map { x in
                let point = Point(x: x, y: y)
                if surface.contains(point) {
                    return "#"
                } else {
                    return "."
                }
            }.joined()
        }
        return rows.joined(separator: "\n")
    }
}

extension State {
    private var floorStop: Int? { floor ? rocks.map(\.y).max()! + 2 : nil }

    func next() -> Self? {
        guard let falling = fallingSand else {
            print(self)
            fatalError()
        }
        guard let nextYStop = occupied.filter({ $0.x == falling.x && $0.y > falling.y }).map(\.y).min() ?? floorStop else {
            return nil
        }
        let candidates = [-1, 1].map { xOffset in Point(x: falling.x + xOffset, y: nextYStop) }
        if let next = candidates.first(where: self.isValid(candidate:)) {
            let maxY = floorStop ?? rocks.map(\.y).max()!
            guard maxY >= next.y else {
                return nil
            }
            return Self(
                rocks: rocks,
                fallingSand: next,
                previousFallingSands: previousFallingSands + [falling],
                restingSand: restingSand,
                surface: surface,
                floor: floor
            )
        } else {
            let resting = Point(x: falling.x, y: nextYStop - 1)
            let fallingSand: Point?
            let previousFalling: [Point]
            if resting != falling {
                fallingSand = falling
                previousFalling = previousFallingSands
            } else {
                fallingSand = previousFallingSands.last
                previousFalling = Array(previousFallingSands.dropLast())
            }
            let newSurface = restingSand.count % 1000 == 0 ? calculateSurface(from: surface, adding: resting) : surface.union([resting])

            return Self(
                rocks: rocks,
                fallingSand: fallingSand,
                previousFallingSands: previousFalling,
                restingSand: restingSand.union([resting]),
                surface: newSurface,
                floor: floor
            )
        }
    }

    private var occupied: Set<Point> {
        rocks.union(restingSand)
    }

    private func isValid(candidate: Point) -> Bool {
        !occupied.contains(candidate) && (candidate.y < floorStop ?? .max)
    }
}

private func calculateSurface(from surface: Set<Point>, adding new: Point) -> Set<Point> {
    var newSurface = surface.union([new])
    let mightBeRemoved = newSurface.filter { $0.distance(to: new) == 1 || ($0.x == new.x && $0.y < new.y) }
    let toRemove: [Point] = mightBeRemoved.filter { point -> Bool in
        let hasAbove = newSurface.contains(Point(x: point.x, y: point.y - 1))
        let hasToLeft = newSurface.contains(Point(x: point.x - 1, y: point.y)) ||
            newSurface.contains(Point(x: point.x - 1, y: point.y - 1))
        let hasToRight = newSurface.contains(Point(x: point.x + 1, y: point.y)) ||
            newSurface.contains(Point(x: point.x + 1, y: point.y - 1))
        return hasAbove && hasToLeft && hasToRight
//        return newSurface.isSuperset(of: neighbours)
    }
    newSurface.subtract(toRemove)
//    print("Surface")
//    plot(surface.map { (Position(x: $0.x, y: $0.y), "#") })
    return newSurface
}

private func parseRocks(_ input: String) -> [Point] {
    input.split(whereSeparator: \.isNewline)
        .map { line in
            line.split(separator: " -> ").map { point in
                let parts = point.split(separator: ",")
                return Point(x: Int(parts[0])!, y: Int(parts[1])!)
            }
        }
        .flatMap { points in
            zip(points, points.dropFirst()).flatMap { start, end in
                if start.x == end.x {
                    let yRange = Swift.min(start.y, end.y)...Swift.max(start.y, end.y)
                    return yRange.map { Point(x: start.x, y: $0) }
                } else if start.y == end.y {
                    let xRange = Swift.min(start.x, end.x)...Swift.max(start.x, end.x)
                    return xRange.map { Point(x: $0, y: start.y) }
                } else {
                    fatalError("We don't support diagonal lines")
                }
            }
        }
}

private extension Collection where Element == Point {
    func intersects(point: Point) -> Bool {
        let pairs = zip(self, self.dropFirst())
        return pairs.contains(where: { lhs, rhs in
            if lhs.x == rhs.x {
                let yRange = Swift.min(lhs.y, rhs.y)...Swift.max(lhs.y, rhs.y)
                return lhs.x == point.x && yRange.contains(point.y)
            } else if lhs.y == rhs.y {
                let xRange = Swift.min(lhs.x, rhs.x)...Swift.max(lhs.x, rhs.x)
                return lhs.y == point.y && xRange.contains(point.x)
            } else {
                fatalError("We don't support diagonal lines")
            }
        })
    }
}

private struct Point: Equatable, Hashable {
    let x: Int
    let y: Int

    func distance(to other: Point) -> Int {
        abs(x - other.x) + abs(y - other.y)
    }
}

private let test = """
498,4 -> 498,6 -> 496,6
503,4 -> 502,4 -> 502,9 -> 494,9
"""

private let input = """
497,166 -> 497,165 -> 497,166 -> 499,166 -> 499,160 -> 499,166 -> 501,166 -> 501,157 -> 501,166 -> 503,166 -> 503,163 -> 503,166 -> 505,166 -> 505,164 -> 505,166 -> 507,166 -> 507,162 -> 507,166 -> 509,166 -> 509,157 -> 509,166 -> 511,166 -> 511,162 -> 511,166 -> 513,166 -> 513,162 -> 513,166 -> 515,166 -> 515,163 -> 515,166
497,166 -> 497,165 -> 497,166 -> 499,166 -> 499,160 -> 499,166 -> 501,166 -> 501,157 -> 501,166 -> 503,166 -> 503,163 -> 503,166 -> 505,166 -> 505,164 -> 505,166 -> 507,166 -> 507,162 -> 507,166 -> 509,166 -> 509,157 -> 509,166 -> 511,166 -> 511,162 -> 511,166 -> 513,166 -> 513,162 -> 513,166 -> 515,166 -> 515,163 -> 515,166
525,75 -> 525,77 -> 517,77 -> 517,83 -> 532,83 -> 532,77 -> 531,77 -> 531,75
535,100 -> 535,93 -> 535,100 -> 537,100 -> 537,92 -> 537,100 -> 539,100 -> 539,99 -> 539,100 -> 541,100 -> 541,96 -> 541,100 -> 543,100 -> 543,92 -> 543,100 -> 545,100 -> 545,97 -> 545,100 -> 547,100 -> 547,95 -> 547,100 -> 549,100 -> 549,93 -> 549,100 -> 551,100 -> 551,90 -> 551,100
513,169 -> 518,169
535,100 -> 535,93 -> 535,100 -> 537,100 -> 537,92 -> 537,100 -> 539,100 -> 539,99 -> 539,100 -> 541,100 -> 541,96 -> 541,100 -> 543,100 -> 543,92 -> 543,100 -> 545,100 -> 545,97 -> 545,100 -> 547,100 -> 547,95 -> 547,100 -> 549,100 -> 549,93 -> 549,100 -> 551,100 -> 551,90 -> 551,100
510,34 -> 514,34
530,86 -> 530,87 -> 543,87 -> 543,86
517,150 -> 521,150
505,65 -> 505,58 -> 505,65 -> 507,65 -> 507,55 -> 507,65 -> 509,65 -> 509,60 -> 509,65 -> 511,65 -> 511,56 -> 511,65 -> 513,65 -> 513,62 -> 513,65
501,177 -> 506,177
505,115 -> 505,119 -> 502,119 -> 502,126 -> 514,126 -> 514,119 -> 510,119 -> 510,115
493,23 -> 493,15 -> 493,23 -> 495,23 -> 495,15 -> 495,23 -> 497,23 -> 497,19 -> 497,23 -> 499,23 -> 499,17 -> 499,23 -> 501,23 -> 501,17 -> 501,23 -> 503,23 -> 503,14 -> 503,23 -> 505,23 -> 505,16 -> 505,23
493,23 -> 493,15 -> 493,23 -> 495,23 -> 495,15 -> 495,23 -> 497,23 -> 497,19 -> 497,23 -> 499,23 -> 499,17 -> 499,23 -> 501,23 -> 501,17 -> 501,23 -> 503,23 -> 503,14 -> 503,23 -> 505,23 -> 505,16 -> 505,23
497,166 -> 497,165 -> 497,166 -> 499,166 -> 499,160 -> 499,166 -> 501,166 -> 501,157 -> 501,166 -> 503,166 -> 503,163 -> 503,166 -> 505,166 -> 505,164 -> 505,166 -> 507,166 -> 507,162 -> 507,166 -> 509,166 -> 509,157 -> 509,166 -> 511,166 -> 511,162 -> 511,166 -> 513,166 -> 513,162 -> 513,166 -> 515,166 -> 515,163 -> 515,166
505,65 -> 505,58 -> 505,65 -> 507,65 -> 507,55 -> 507,65 -> 509,65 -> 509,60 -> 509,65 -> 511,65 -> 511,56 -> 511,65 -> 513,65 -> 513,62 -> 513,65
497,166 -> 497,165 -> 497,166 -> 499,166 -> 499,160 -> 499,166 -> 501,166 -> 501,157 -> 501,166 -> 503,166 -> 503,163 -> 503,166 -> 505,166 -> 505,164 -> 505,166 -> 507,166 -> 507,162 -> 507,166 -> 509,166 -> 509,157 -> 509,166 -> 511,166 -> 511,162 -> 511,166 -> 513,166 -> 513,162 -> 513,166 -> 515,166 -> 515,163 -> 515,166
511,52 -> 516,52
505,115 -> 505,119 -> 502,119 -> 502,126 -> 514,126 -> 514,119 -> 510,119 -> 510,115
535,100 -> 535,93 -> 535,100 -> 537,100 -> 537,92 -> 537,100 -> 539,100 -> 539,99 -> 539,100 -> 541,100 -> 541,96 -> 541,100 -> 543,100 -> 543,92 -> 543,100 -> 545,100 -> 545,97 -> 545,100 -> 547,100 -> 547,95 -> 547,100 -> 549,100 -> 549,93 -> 549,100 -> 551,100 -> 551,90 -> 551,100
504,30 -> 508,30
535,100 -> 535,93 -> 535,100 -> 537,100 -> 537,92 -> 537,100 -> 539,100 -> 539,99 -> 539,100 -> 541,100 -> 541,96 -> 541,100 -> 543,100 -> 543,92 -> 543,100 -> 545,100 -> 545,97 -> 545,100 -> 547,100 -> 547,95 -> 547,100 -> 549,100 -> 549,93 -> 549,100 -> 551,100 -> 551,90 -> 551,100
535,100 -> 535,93 -> 535,100 -> 537,100 -> 537,92 -> 537,100 -> 539,100 -> 539,99 -> 539,100 -> 541,100 -> 541,96 -> 541,100 -> 543,100 -> 543,92 -> 543,100 -> 545,100 -> 545,97 -> 545,100 -> 547,100 -> 547,95 -> 547,100 -> 549,100 -> 549,93 -> 549,100 -> 551,100 -> 551,90 -> 551,100
493,23 -> 493,15 -> 493,23 -> 495,23 -> 495,15 -> 495,23 -> 497,23 -> 497,19 -> 497,23 -> 499,23 -> 499,17 -> 499,23 -> 501,23 -> 501,17 -> 501,23 -> 503,23 -> 503,14 -> 503,23 -> 505,23 -> 505,16 -> 505,23
505,65 -> 505,58 -> 505,65 -> 507,65 -> 507,55 -> 507,65 -> 509,65 -> 509,60 -> 509,65 -> 511,65 -> 511,56 -> 511,65 -> 513,65 -> 513,62 -> 513,65
535,100 -> 535,93 -> 535,100 -> 537,100 -> 537,92 -> 537,100 -> 539,100 -> 539,99 -> 539,100 -> 541,100 -> 541,96 -> 541,100 -> 543,100 -> 543,92 -> 543,100 -> 545,100 -> 545,97 -> 545,100 -> 547,100 -> 547,95 -> 547,100 -> 549,100 -> 549,93 -> 549,100 -> 551,100 -> 551,90 -> 551,100
535,100 -> 535,93 -> 535,100 -> 537,100 -> 537,92 -> 537,100 -> 539,100 -> 539,99 -> 539,100 -> 541,100 -> 541,96 -> 541,100 -> 543,100 -> 543,92 -> 543,100 -> 545,100 -> 545,97 -> 545,100 -> 547,100 -> 547,95 -> 547,100 -> 549,100 -> 549,93 -> 549,100 -> 551,100 -> 551,90 -> 551,100
493,23 -> 493,15 -> 493,23 -> 495,23 -> 495,15 -> 495,23 -> 497,23 -> 497,19 -> 497,23 -> 499,23 -> 499,17 -> 499,23 -> 501,23 -> 501,17 -> 501,23 -> 503,23 -> 503,14 -> 503,23 -> 505,23 -> 505,16 -> 505,23
523,150 -> 527,150
525,175 -> 530,175
535,100 -> 535,93 -> 535,100 -> 537,100 -> 537,92 -> 537,100 -> 539,100 -> 539,99 -> 539,100 -> 541,100 -> 541,96 -> 541,100 -> 543,100 -> 543,92 -> 543,100 -> 545,100 -> 545,97 -> 545,100 -> 547,100 -> 547,95 -> 547,100 -> 549,100 -> 549,93 -> 549,100 -> 551,100 -> 551,90 -> 551,100
505,65 -> 505,58 -> 505,65 -> 507,65 -> 507,55 -> 507,65 -> 509,65 -> 509,60 -> 509,65 -> 511,65 -> 511,56 -> 511,65 -> 513,65 -> 513,62 -> 513,65
525,75 -> 525,77 -> 517,77 -> 517,83 -> 532,83 -> 532,77 -> 531,77 -> 531,75
532,52 -> 537,52
497,166 -> 497,165 -> 497,166 -> 499,166 -> 499,160 -> 499,166 -> 501,166 -> 501,157 -> 501,166 -> 503,166 -> 503,163 -> 503,166 -> 505,166 -> 505,164 -> 505,166 -> 507,166 -> 507,162 -> 507,166 -> 509,166 -> 509,157 -> 509,166 -> 511,166 -> 511,162 -> 511,166 -> 513,166 -> 513,162 -> 513,166 -> 515,166 -> 515,163 -> 515,166
497,166 -> 497,165 -> 497,166 -> 499,166 -> 499,160 -> 499,166 -> 501,166 -> 501,157 -> 501,166 -> 503,166 -> 503,163 -> 503,166 -> 505,166 -> 505,164 -> 505,166 -> 507,166 -> 507,162 -> 507,166 -> 509,166 -> 509,157 -> 509,166 -> 511,166 -> 511,162 -> 511,166 -> 513,166 -> 513,162 -> 513,166 -> 515,166 -> 515,163 -> 515,166
497,166 -> 497,165 -> 497,166 -> 499,166 -> 499,160 -> 499,166 -> 501,166 -> 501,157 -> 501,166 -> 503,166 -> 503,163 -> 503,166 -> 505,166 -> 505,164 -> 505,166 -> 507,166 -> 507,162 -> 507,166 -> 509,166 -> 509,157 -> 509,166 -> 511,166 -> 511,162 -> 511,166 -> 513,166 -> 513,162 -> 513,166 -> 515,166 -> 515,163 -> 515,166
493,23 -> 493,15 -> 493,23 -> 495,23 -> 495,15 -> 495,23 -> 497,23 -> 497,19 -> 497,23 -> 499,23 -> 499,17 -> 499,23 -> 501,23 -> 501,17 -> 501,23 -> 503,23 -> 503,14 -> 503,23 -> 505,23 -> 505,16 -> 505,23
525,75 -> 525,77 -> 517,77 -> 517,83 -> 532,83 -> 532,77 -> 531,77 -> 531,75
505,115 -> 505,119 -> 502,119 -> 502,126 -> 514,126 -> 514,119 -> 510,119 -> 510,115
535,100 -> 535,93 -> 535,100 -> 537,100 -> 537,92 -> 537,100 -> 539,100 -> 539,99 -> 539,100 -> 541,100 -> 541,96 -> 541,100 -> 543,100 -> 543,92 -> 543,100 -> 545,100 -> 545,97 -> 545,100 -> 547,100 -> 547,95 -> 547,100 -> 549,100 -> 549,93 -> 549,100 -> 551,100 -> 551,90 -> 551,100
502,103 -> 502,105 -> 498,105 -> 498,112 -> 507,112 -> 507,105 -> 504,105 -> 504,103
510,30 -> 514,30
497,166 -> 497,165 -> 497,166 -> 499,166 -> 499,160 -> 499,166 -> 501,166 -> 501,157 -> 501,166 -> 503,166 -> 503,163 -> 503,166 -> 505,166 -> 505,164 -> 505,166 -> 507,166 -> 507,162 -> 507,166 -> 509,166 -> 509,157 -> 509,166 -> 511,166 -> 511,162 -> 511,166 -> 513,166 -> 513,162 -> 513,166 -> 515,166 -> 515,163 -> 515,166
511,150 -> 515,150
497,166 -> 497,165 -> 497,166 -> 499,166 -> 499,160 -> 499,166 -> 501,166 -> 501,157 -> 501,166 -> 503,166 -> 503,163 -> 503,166 -> 505,166 -> 505,164 -> 505,166 -> 507,166 -> 507,162 -> 507,166 -> 509,166 -> 509,157 -> 509,166 -> 511,166 -> 511,162 -> 511,166 -> 513,166 -> 513,162 -> 513,166 -> 515,166 -> 515,163 -> 515,166
514,147 -> 518,147
505,65 -> 505,58 -> 505,65 -> 507,65 -> 507,55 -> 507,65 -> 509,65 -> 509,60 -> 509,65 -> 511,65 -> 511,56 -> 511,65 -> 513,65 -> 513,62 -> 513,65
493,23 -> 493,15 -> 493,23 -> 495,23 -> 495,15 -> 495,23 -> 497,23 -> 497,19 -> 497,23 -> 499,23 -> 499,17 -> 499,23 -> 501,23 -> 501,17 -> 501,23 -> 503,23 -> 503,14 -> 503,23 -> 505,23 -> 505,16 -> 505,23
511,175 -> 516,175
535,100 -> 535,93 -> 535,100 -> 537,100 -> 537,92 -> 537,100 -> 539,100 -> 539,99 -> 539,100 -> 541,100 -> 541,96 -> 541,100 -> 543,100 -> 543,92 -> 543,100 -> 545,100 -> 545,97 -> 545,100 -> 547,100 -> 547,95 -> 547,100 -> 549,100 -> 549,93 -> 549,100 -> 551,100 -> 551,90 -> 551,100
507,32 -> 511,32
497,166 -> 497,165 -> 497,166 -> 499,166 -> 499,160 -> 499,166 -> 501,166 -> 501,157 -> 501,166 -> 503,166 -> 503,163 -> 503,166 -> 505,166 -> 505,164 -> 505,166 -> 507,166 -> 507,162 -> 507,166 -> 509,166 -> 509,157 -> 509,166 -> 511,166 -> 511,162 -> 511,166 -> 513,166 -> 513,162 -> 513,166 -> 515,166 -> 515,163 -> 515,166
505,115 -> 505,119 -> 502,119 -> 502,126 -> 514,126 -> 514,119 -> 510,119 -> 510,115
508,177 -> 513,177
502,103 -> 502,105 -> 498,105 -> 498,112 -> 507,112 -> 507,105 -> 504,105 -> 504,103
493,23 -> 493,15 -> 493,23 -> 495,23 -> 495,15 -> 495,23 -> 497,23 -> 497,19 -> 497,23 -> 499,23 -> 499,17 -> 499,23 -> 501,23 -> 501,17 -> 501,23 -> 503,23 -> 503,14 -> 503,23 -> 505,23 -> 505,16 -> 505,23
515,177 -> 520,177
493,23 -> 493,15 -> 493,23 -> 495,23 -> 495,15 -> 495,23 -> 497,23 -> 497,19 -> 497,23 -> 499,23 -> 499,17 -> 499,23 -> 501,23 -> 501,17 -> 501,23 -> 503,23 -> 503,14 -> 503,23 -> 505,23 -> 505,16 -> 505,23
521,49 -> 526,49
520,153 -> 524,153
535,100 -> 535,93 -> 535,100 -> 537,100 -> 537,92 -> 537,100 -> 539,100 -> 539,99 -> 539,100 -> 541,100 -> 541,96 -> 541,100 -> 543,100 -> 543,92 -> 543,100 -> 545,100 -> 545,97 -> 545,100 -> 547,100 -> 547,95 -> 547,100 -> 549,100 -> 549,93 -> 549,100 -> 551,100 -> 551,90 -> 551,100
497,166 -> 497,165 -> 497,166 -> 499,166 -> 499,160 -> 499,166 -> 501,166 -> 501,157 -> 501,166 -> 503,166 -> 503,163 -> 503,166 -> 505,166 -> 505,164 -> 505,166 -> 507,166 -> 507,162 -> 507,166 -> 509,166 -> 509,157 -> 509,166 -> 511,166 -> 511,162 -> 511,166 -> 513,166 -> 513,162 -> 513,166 -> 515,166 -> 515,163 -> 515,166
507,49 -> 512,49
518,175 -> 523,175
505,115 -> 505,119 -> 502,119 -> 502,126 -> 514,126 -> 514,119 -> 510,119 -> 510,115
514,49 -> 519,49
521,173 -> 526,173
535,100 -> 535,93 -> 535,100 -> 537,100 -> 537,92 -> 537,100 -> 539,100 -> 539,99 -> 539,100 -> 541,100 -> 541,96 -> 541,100 -> 543,100 -> 543,92 -> 543,100 -> 545,100 -> 545,97 -> 545,100 -> 547,100 -> 547,95 -> 547,100 -> 549,100 -> 549,93 -> 549,100 -> 551,100 -> 551,90 -> 551,100
495,32 -> 499,32
504,34 -> 508,34
510,171 -> 515,171
497,166 -> 497,165 -> 497,166 -> 499,166 -> 499,160 -> 499,166 -> 501,166 -> 501,157 -> 501,166 -> 503,166 -> 503,163 -> 503,166 -> 505,166 -> 505,164 -> 505,166 -> 507,166 -> 507,162 -> 507,166 -> 509,166 -> 509,157 -> 509,166 -> 511,166 -> 511,162 -> 511,166 -> 513,166 -> 513,162 -> 513,166 -> 515,166 -> 515,163 -> 515,166
497,166 -> 497,165 -> 497,166 -> 499,166 -> 499,160 -> 499,166 -> 501,166 -> 501,157 -> 501,166 -> 503,166 -> 503,163 -> 503,166 -> 505,166 -> 505,164 -> 505,166 -> 507,166 -> 507,162 -> 507,166 -> 509,166 -> 509,157 -> 509,166 -> 511,166 -> 511,162 -> 511,166 -> 513,166 -> 513,162 -> 513,166 -> 515,166 -> 515,163 -> 515,166
535,100 -> 535,93 -> 535,100 -> 537,100 -> 537,92 -> 537,100 -> 539,100 -> 539,99 -> 539,100 -> 541,100 -> 541,96 -> 541,100 -> 543,100 -> 543,92 -> 543,100 -> 545,100 -> 545,97 -> 545,100 -> 547,100 -> 547,95 -> 547,100 -> 549,100 -> 549,93 -> 549,100 -> 551,100 -> 551,90 -> 551,100
514,129 -> 514,133 -> 507,133 -> 507,141 -> 518,141 -> 518,133 -> 517,133 -> 517,129
517,71 -> 517,72 -> 527,72 -> 527,71
514,129 -> 514,133 -> 507,133 -> 507,141 -> 518,141 -> 518,133 -> 517,133 -> 517,129
535,100 -> 535,93 -> 535,100 -> 537,100 -> 537,92 -> 537,100 -> 539,100 -> 539,99 -> 539,100 -> 541,100 -> 541,96 -> 541,100 -> 543,100 -> 543,92 -> 543,100 -> 545,100 -> 545,97 -> 545,100 -> 547,100 -> 547,95 -> 547,100 -> 549,100 -> 549,93 -> 549,100 -> 551,100 -> 551,90 -> 551,100
505,65 -> 505,58 -> 505,65 -> 507,65 -> 507,55 -> 507,65 -> 509,65 -> 509,60 -> 509,65 -> 511,65 -> 511,56 -> 511,65 -> 513,65 -> 513,62 -> 513,65
526,153 -> 530,153
493,23 -> 493,15 -> 493,23 -> 495,23 -> 495,15 -> 495,23 -> 497,23 -> 497,19 -> 497,23 -> 499,23 -> 499,17 -> 499,23 -> 501,23 -> 501,17 -> 501,23 -> 503,23 -> 503,14 -> 503,23 -> 505,23 -> 505,16 -> 505,23
525,75 -> 525,77 -> 517,77 -> 517,83 -> 532,83 -> 532,77 -> 531,77 -> 531,75
497,166 -> 497,165 -> 497,166 -> 499,166 -> 499,160 -> 499,166 -> 501,166 -> 501,157 -> 501,166 -> 503,166 -> 503,163 -> 503,166 -> 505,166 -> 505,164 -> 505,166 -> 507,166 -> 507,162 -> 507,166 -> 509,166 -> 509,157 -> 509,166 -> 511,166 -> 511,162 -> 511,166 -> 513,166 -> 513,162 -> 513,166 -> 515,166 -> 515,163 -> 515,166
507,68 -> 507,69 -> 523,69
497,166 -> 497,165 -> 497,166 -> 499,166 -> 499,160 -> 499,166 -> 501,166 -> 501,157 -> 501,166 -> 503,166 -> 503,163 -> 503,166 -> 505,166 -> 505,164 -> 505,166 -> 507,166 -> 507,162 -> 507,166 -> 509,166 -> 509,157 -> 509,166 -> 511,166 -> 511,162 -> 511,166 -> 513,166 -> 513,162 -> 513,166 -> 515,166 -> 515,163 -> 515,166
513,32 -> 517,32
493,23 -> 493,15 -> 493,23 -> 495,23 -> 495,15 -> 495,23 -> 497,23 -> 497,19 -> 497,23 -> 499,23 -> 499,17 -> 499,23 -> 501,23 -> 501,17 -> 501,23 -> 503,23 -> 503,14 -> 503,23 -> 505,23 -> 505,16 -> 505,23
502,103 -> 502,105 -> 498,105 -> 498,112 -> 507,112 -> 507,105 -> 504,105 -> 504,103
493,23 -> 493,15 -> 493,23 -> 495,23 -> 495,15 -> 495,23 -> 497,23 -> 497,19 -> 497,23 -> 499,23 -> 499,17 -> 499,23 -> 501,23 -> 501,17 -> 501,23 -> 503,23 -> 503,14 -> 503,23 -> 505,23 -> 505,16 -> 505,23
516,40 -> 521,40
497,166 -> 497,165 -> 497,166 -> 499,166 -> 499,160 -> 499,166 -> 501,166 -> 501,157 -> 501,166 -> 503,166 -> 503,163 -> 503,166 -> 505,166 -> 505,164 -> 505,166 -> 507,166 -> 507,162 -> 507,166 -> 509,166 -> 509,157 -> 509,166 -> 511,166 -> 511,162 -> 511,166 -> 513,166 -> 513,162 -> 513,166 -> 515,166 -> 515,163 -> 515,166
520,36 -> 520,37 -> 528,37 -> 528,36
498,34 -> 502,34
535,100 -> 535,93 -> 535,100 -> 537,100 -> 537,92 -> 537,100 -> 539,100 -> 539,99 -> 539,100 -> 541,100 -> 541,96 -> 541,100 -> 543,100 -> 543,92 -> 543,100 -> 545,100 -> 545,97 -> 545,100 -> 547,100 -> 547,95 -> 547,100 -> 549,100 -> 549,93 -> 549,100 -> 551,100 -> 551,90 -> 551,100
514,129 -> 514,133 -> 507,133 -> 507,141 -> 518,141 -> 518,133 -> 517,133 -> 517,129
498,30 -> 502,30
497,166 -> 497,165 -> 497,166 -> 499,166 -> 499,160 -> 499,166 -> 501,166 -> 501,157 -> 501,166 -> 503,166 -> 503,163 -> 503,166 -> 505,166 -> 505,164 -> 505,166 -> 507,166 -> 507,162 -> 507,166 -> 509,166 -> 509,157 -> 509,166 -> 511,166 -> 511,162 -> 511,166 -> 513,166 -> 513,162 -> 513,166 -> 515,166 -> 515,163 -> 515,166
497,166 -> 497,165 -> 497,166 -> 499,166 -> 499,160 -> 499,166 -> 501,166 -> 501,157 -> 501,166 -> 503,166 -> 503,163 -> 503,166 -> 505,166 -> 505,164 -> 505,166 -> 507,166 -> 507,162 -> 507,166 -> 509,166 -> 509,157 -> 509,166 -> 511,166 -> 511,162 -> 511,166 -> 513,166 -> 513,162 -> 513,166 -> 515,166 -> 515,163 -> 515,166
505,65 -> 505,58 -> 505,65 -> 507,65 -> 507,55 -> 507,65 -> 509,65 -> 509,60 -> 509,65 -> 511,65 -> 511,56 -> 511,65 -> 513,65 -> 513,62 -> 513,65
504,175 -> 509,175
502,103 -> 502,105 -> 498,105 -> 498,112 -> 507,112 -> 507,105 -> 504,105 -> 504,103
497,166 -> 497,165 -> 497,166 -> 499,166 -> 499,160 -> 499,166 -> 501,166 -> 501,157 -> 501,166 -> 503,166 -> 503,163 -> 503,166 -> 505,166 -> 505,164 -> 505,166 -> 507,166 -> 507,162 -> 507,166 -> 509,166 -> 509,157 -> 509,166 -> 511,166 -> 511,162 -> 511,166 -> 513,166 -> 513,162 -> 513,166 -> 515,166 -> 515,163 -> 515,166
535,100 -> 535,93 -> 535,100 -> 537,100 -> 537,92 -> 537,100 -> 539,100 -> 539,99 -> 539,100 -> 541,100 -> 541,96 -> 541,100 -> 543,100 -> 543,92 -> 543,100 -> 545,100 -> 545,97 -> 545,100 -> 547,100 -> 547,95 -> 547,100 -> 549,100 -> 549,93 -> 549,100 -> 551,100 -> 551,90 -> 551,100
493,23 -> 493,15 -> 493,23 -> 495,23 -> 495,15 -> 495,23 -> 497,23 -> 497,19 -> 497,23 -> 499,23 -> 499,17 -> 499,23 -> 501,23 -> 501,17 -> 501,23 -> 503,23 -> 503,14 -> 503,23 -> 505,23 -> 505,16 -> 505,23
510,46 -> 515,46
535,100 -> 535,93 -> 535,100 -> 537,100 -> 537,92 -> 537,100 -> 539,100 -> 539,99 -> 539,100 -> 541,100 -> 541,96 -> 541,100 -> 543,100 -> 543,92 -> 543,100 -> 545,100 -> 545,97 -> 545,100 -> 547,100 -> 547,95 -> 547,100 -> 549,100 -> 549,93 -> 549,100 -> 551,100 -> 551,90 -> 551,100
520,36 -> 520,37 -> 528,37 -> 528,36
497,166 -> 497,165 -> 497,166 -> 499,166 -> 499,160 -> 499,166 -> 501,166 -> 501,157 -> 501,166 -> 503,166 -> 503,163 -> 503,166 -> 505,166 -> 505,164 -> 505,166 -> 507,166 -> 507,162 -> 507,166 -> 509,166 -> 509,157 -> 509,166 -> 511,166 -> 511,162 -> 511,166 -> 513,166 -> 513,162 -> 513,166 -> 515,166 -> 515,163 -> 515,166
514,129 -> 514,133 -> 507,133 -> 507,141 -> 518,141 -> 518,133 -> 517,133 -> 517,129
516,34 -> 520,34
505,65 -> 505,58 -> 505,65 -> 507,65 -> 507,55 -> 507,65 -> 509,65 -> 509,60 -> 509,65 -> 511,65 -> 511,56 -> 511,65 -> 513,65 -> 513,62 -> 513,65
525,75 -> 525,77 -> 517,77 -> 517,83 -> 532,83 -> 532,77 -> 531,77 -> 531,75
497,166 -> 497,165 -> 497,166 -> 499,166 -> 499,160 -> 499,166 -> 501,166 -> 501,157 -> 501,166 -> 503,166 -> 503,163 -> 503,166 -> 505,166 -> 505,164 -> 505,166 -> 507,166 -> 507,162 -> 507,166 -> 509,166 -> 509,157 -> 509,166 -> 511,166 -> 511,162 -> 511,166 -> 513,166 -> 513,162 -> 513,166 -> 515,166 -> 515,163 -> 515,166
505,65 -> 505,58 -> 505,65 -> 507,65 -> 507,55 -> 507,65 -> 509,65 -> 509,60 -> 509,65 -> 511,65 -> 511,56 -> 511,65 -> 513,65 -> 513,62 -> 513,65
497,166 -> 497,165 -> 497,166 -> 499,166 -> 499,160 -> 499,166 -> 501,166 -> 501,157 -> 501,166 -> 503,166 -> 503,163 -> 503,166 -> 505,166 -> 505,164 -> 505,166 -> 507,166 -> 507,162 -> 507,166 -> 509,166 -> 509,157 -> 509,166 -> 511,166 -> 511,162 -> 511,166 -> 513,166 -> 513,162 -> 513,166 -> 515,166 -> 515,163 -> 515,166
514,173 -> 519,173
492,34 -> 496,34
525,52 -> 530,52
502,103 -> 502,105 -> 498,105 -> 498,112 -> 507,112 -> 507,105 -> 504,105 -> 504,103
507,68 -> 507,69 -> 523,69
493,23 -> 493,15 -> 493,23 -> 495,23 -> 495,15 -> 495,23 -> 497,23 -> 497,19 -> 497,23 -> 499,23 -> 499,17 -> 499,23 -> 501,23 -> 501,17 -> 501,23 -> 503,23 -> 503,14 -> 503,23 -> 505,23 -> 505,16 -> 505,23
505,65 -> 505,58 -> 505,65 -> 507,65 -> 507,55 -> 507,65 -> 509,65 -> 509,60 -> 509,65 -> 511,65 -> 511,56 -> 511,65 -> 513,65 -> 513,62 -> 513,65
520,36 -> 520,37 -> 528,37 -> 528,36
497,166 -> 497,165 -> 497,166 -> 499,166 -> 499,160 -> 499,166 -> 501,166 -> 501,157 -> 501,166 -> 503,166 -> 503,163 -> 503,166 -> 505,166 -> 505,164 -> 505,166 -> 507,166 -> 507,162 -> 507,166 -> 509,166 -> 509,157 -> 509,166 -> 511,166 -> 511,162 -> 511,166 -> 513,166 -> 513,162 -> 513,166 -> 515,166 -> 515,163 -> 515,166
505,115 -> 505,119 -> 502,119 -> 502,126 -> 514,126 -> 514,119 -> 510,119 -> 510,115
507,173 -> 512,173
493,23 -> 493,15 -> 493,23 -> 495,23 -> 495,15 -> 495,23 -> 497,23 -> 497,19 -> 497,23 -> 499,23 -> 499,17 -> 499,23 -> 501,23 -> 501,17 -> 501,23 -> 503,23 -> 503,14 -> 503,23 -> 505,23 -> 505,16 -> 505,23
505,65 -> 505,58 -> 505,65 -> 507,65 -> 507,55 -> 507,65 -> 509,65 -> 509,60 -> 509,65 -> 511,65 -> 511,56 -> 511,65 -> 513,65 -> 513,62 -> 513,65
497,166 -> 497,165 -> 497,166 -> 499,166 -> 499,160 -> 499,166 -> 501,166 -> 501,157 -> 501,166 -> 503,166 -> 503,163 -> 503,166 -> 505,166 -> 505,164 -> 505,166 -> 507,166 -> 507,162 -> 507,166 -> 509,166 -> 509,157 -> 509,166 -> 511,166 -> 511,162 -> 511,166 -> 513,166 -> 513,162 -> 513,166 -> 515,166 -> 515,163 -> 515,166
493,23 -> 493,15 -> 493,23 -> 495,23 -> 495,15 -> 495,23 -> 497,23 -> 497,19 -> 497,23 -> 499,23 -> 499,17 -> 499,23 -> 501,23 -> 501,17 -> 501,23 -> 503,23 -> 503,14 -> 503,23 -> 505,23 -> 505,16 -> 505,23
504,52 -> 509,52
502,103 -> 502,105 -> 498,105 -> 498,112 -> 507,112 -> 507,105 -> 504,105 -> 504,103
535,100 -> 535,93 -> 535,100 -> 537,100 -> 537,92 -> 537,100 -> 539,100 -> 539,99 -> 539,100 -> 541,100 -> 541,96 -> 541,100 -> 543,100 -> 543,92 -> 543,100 -> 545,100 -> 545,97 -> 545,100 -> 547,100 -> 547,95 -> 547,100 -> 549,100 -> 549,93 -> 549,100 -> 551,100 -> 551,90 -> 551,100
497,166 -> 497,165 -> 497,166 -> 499,166 -> 499,160 -> 499,166 -> 501,166 -> 501,157 -> 501,166 -> 503,166 -> 503,163 -> 503,166 -> 505,166 -> 505,164 -> 505,166 -> 507,166 -> 507,162 -> 507,166 -> 509,166 -> 509,157 -> 509,166 -> 511,166 -> 511,162 -> 511,166 -> 513,166 -> 513,162 -> 513,166 -> 515,166 -> 515,163 -> 515,166
517,71 -> 517,72 -> 527,72 -> 527,71
535,100 -> 535,93 -> 535,100 -> 537,100 -> 537,92 -> 537,100 -> 539,100 -> 539,99 -> 539,100 -> 541,100 -> 541,96 -> 541,100 -> 543,100 -> 543,92 -> 543,100 -> 545,100 -> 545,97 -> 545,100 -> 547,100 -> 547,95 -> 547,100 -> 549,100 -> 549,93 -> 549,100 -> 551,100 -> 551,90 -> 551,100
535,100 -> 535,93 -> 535,100 -> 537,100 -> 537,92 -> 537,100 -> 539,100 -> 539,99 -> 539,100 -> 541,100 -> 541,96 -> 541,100 -> 543,100 -> 543,92 -> 543,100 -> 545,100 -> 545,97 -> 545,100 -> 547,100 -> 547,95 -> 547,100 -> 549,100 -> 549,93 -> 549,100 -> 551,100 -> 551,90 -> 551,100
493,23 -> 493,15 -> 493,23 -> 495,23 -> 495,15 -> 495,23 -> 497,23 -> 497,19 -> 497,23 -> 499,23 -> 499,17 -> 499,23 -> 501,23 -> 501,17 -> 501,23 -> 503,23 -> 503,14 -> 503,23 -> 505,23 -> 505,16 -> 505,23
524,46 -> 529,46
508,153 -> 512,153
535,100 -> 535,93 -> 535,100 -> 537,100 -> 537,92 -> 537,100 -> 539,100 -> 539,99 -> 539,100 -> 541,100 -> 541,96 -> 541,100 -> 543,100 -> 543,92 -> 543,100 -> 545,100 -> 545,97 -> 545,100 -> 547,100 -> 547,95 -> 547,100 -> 549,100 -> 549,93 -> 549,100 -> 551,100 -> 551,90 -> 551,100
535,100 -> 535,93 -> 535,100 -> 537,100 -> 537,92 -> 537,100 -> 539,100 -> 539,99 -> 539,100 -> 541,100 -> 541,96 -> 541,100 -> 543,100 -> 543,92 -> 543,100 -> 545,100 -> 545,97 -> 545,100 -> 547,100 -> 547,95 -> 547,100 -> 549,100 -> 549,93 -> 549,100 -> 551,100 -> 551,90 -> 551,100
535,100 -> 535,93 -> 535,100 -> 537,100 -> 537,92 -> 537,100 -> 539,100 -> 539,99 -> 539,100 -> 541,100 -> 541,96 -> 541,100 -> 543,100 -> 543,92 -> 543,100 -> 545,100 -> 545,97 -> 545,100 -> 547,100 -> 547,95 -> 547,100 -> 549,100 -> 549,93 -> 549,100 -> 551,100 -> 551,90 -> 551,100
530,86 -> 530,87 -> 543,87 -> 543,86
497,166 -> 497,165 -> 497,166 -> 499,166 -> 499,160 -> 499,166 -> 501,166 -> 501,157 -> 501,166 -> 503,166 -> 503,163 -> 503,166 -> 505,166 -> 505,164 -> 505,166 -> 507,166 -> 507,162 -> 507,166 -> 509,166 -> 509,157 -> 509,166 -> 511,166 -> 511,162 -> 511,166 -> 513,166 -> 513,162 -> 513,166 -> 515,166 -> 515,163 -> 515,166
505,65 -> 505,58 -> 505,65 -> 507,65 -> 507,55 -> 507,65 -> 509,65 -> 509,60 -> 509,65 -> 511,65 -> 511,56 -> 511,65 -> 513,65 -> 513,62 -> 513,65
504,26 -> 508,26
514,129 -> 514,133 -> 507,133 -> 507,141 -> 518,141 -> 518,133 -> 517,133 -> 517,129
522,177 -> 527,177
525,75 -> 525,77 -> 517,77 -> 517,83 -> 532,83 -> 532,77 -> 531,77 -> 531,75
493,23 -> 493,15 -> 493,23 -> 495,23 -> 495,15 -> 495,23 -> 497,23 -> 497,19 -> 497,23 -> 499,23 -> 499,17 -> 499,23 -> 501,23 -> 501,17 -> 501,23 -> 503,23 -> 503,14 -> 503,23 -> 505,23 -> 505,16 -> 505,23
514,129 -> 514,133 -> 507,133 -> 507,141 -> 518,141 -> 518,133 -> 517,133 -> 517,129
517,46 -> 522,46
507,28 -> 511,28
514,153 -> 518,153
517,144 -> 521,144
517,71 -> 517,72 -> 527,72 -> 527,71
525,75 -> 525,77 -> 517,77 -> 517,83 -> 532,83 -> 532,77 -> 531,77 -> 531,75
514,129 -> 514,133 -> 507,133 -> 507,141 -> 518,141 -> 518,133 -> 517,133 -> 517,129
520,147 -> 524,147
530,86 -> 530,87 -> 543,87 -> 543,86
518,52 -> 523,52
497,166 -> 497,165 -> 497,166 -> 499,166 -> 499,160 -> 499,166 -> 501,166 -> 501,157 -> 501,166 -> 503,166 -> 503,163 -> 503,166 -> 505,166 -> 505,164 -> 505,166 -> 507,166 -> 507,162 -> 507,166 -> 509,166 -> 509,157 -> 509,166 -> 511,166 -> 511,162 -> 511,166 -> 513,166 -> 513,162 -> 513,166 -> 515,166 -> 515,163 -> 515,166
517,171 -> 522,171
497,166 -> 497,165 -> 497,166 -> 499,166 -> 499,160 -> 499,166 -> 501,166 -> 501,157 -> 501,166 -> 503,166 -> 503,163 -> 503,166 -> 505,166 -> 505,164 -> 505,166 -> 507,166 -> 507,162 -> 507,166 -> 509,166 -> 509,157 -> 509,166 -> 511,166 -> 511,162 -> 511,166 -> 513,166 -> 513,162 -> 513,166 -> 515,166 -> 515,163 -> 515,166
505,115 -> 505,119 -> 502,119 -> 502,126 -> 514,126 -> 514,119 -> 510,119 -> 510,115
497,166 -> 497,165 -> 497,166 -> 499,166 -> 499,160 -> 499,166 -> 501,166 -> 501,157 -> 501,166 -> 503,166 -> 503,163 -> 503,166 -> 505,166 -> 505,164 -> 505,166 -> 507,166 -> 507,162 -> 507,166 -> 509,166 -> 509,157 -> 509,166 -> 511,166 -> 511,162 -> 511,166 -> 513,166 -> 513,162 -> 513,166 -> 515,166 -> 515,163 -> 515,166
535,100 -> 535,93 -> 535,100 -> 537,100 -> 537,92 -> 537,100 -> 539,100 -> 539,99 -> 539,100 -> 541,100 -> 541,96 -> 541,100 -> 543,100 -> 543,92 -> 543,100 -> 545,100 -> 545,97 -> 545,100 -> 547,100 -> 547,95 -> 547,100 -> 549,100 -> 549,93 -> 549,100 -> 551,100 -> 551,90 -> 551,100
493,23 -> 493,15 -> 493,23 -> 495,23 -> 495,15 -> 495,23 -> 497,23 -> 497,19 -> 497,23 -> 499,23 -> 499,17 -> 499,23 -> 501,23 -> 501,17 -> 501,23 -> 503,23 -> 503,14 -> 503,23 -> 505,23 -> 505,16 -> 505,23
528,49 -> 533,49
505,65 -> 505,58 -> 505,65 -> 507,65 -> 507,55 -> 507,65 -> 509,65 -> 509,60 -> 509,65 -> 511,65 -> 511,56 -> 511,65 -> 513,65 -> 513,62 -> 513,65
529,177 -> 534,177
501,32 -> 505,32
535,100 -> 535,93 -> 535,100 -> 537,100 -> 537,92 -> 537,100 -> 539,100 -> 539,99 -> 539,100 -> 541,100 -> 541,96 -> 541,100 -> 543,100 -> 543,92 -> 543,100 -> 545,100 -> 545,97 -> 545,100 -> 547,100 -> 547,95 -> 547,100 -> 549,100 -> 549,93 -> 549,100 -> 551,100 -> 551,90 -> 551,100
493,23 -> 493,15 -> 493,23 -> 495,23 -> 495,15 -> 495,23 -> 497,23 -> 497,19 -> 497,23 -> 499,23 -> 499,17 -> 499,23 -> 501,23 -> 501,17 -> 501,23 -> 503,23 -> 503,14 -> 503,23 -> 505,23 -> 505,16 -> 505,23
501,28 -> 505,28
493,23 -> 493,15 -> 493,23 -> 495,23 -> 495,15 -> 495,23 -> 497,23 -> 497,19 -> 497,23 -> 499,23 -> 499,17 -> 499,23 -> 501,23 -> 501,17 -> 501,23 -> 503,23 -> 503,14 -> 503,23 -> 505,23 -> 505,16 -> 505,23
502,103 -> 502,105 -> 498,105 -> 498,112 -> 507,112 -> 507,105 -> 504,105 -> 504,103
535,100 -> 535,93 -> 535,100 -> 537,100 -> 537,92 -> 537,100 -> 539,100 -> 539,99 -> 539,100 -> 541,100 -> 541,96 -> 541,100 -> 543,100 -> 543,92 -> 543,100 -> 545,100 -> 545,97 -> 545,100 -> 547,100 -> 547,95 -> 547,100 -> 549,100 -> 549,93 -> 549,100 -> 551,100 -> 551,90 -> 551,100
513,43 -> 518,43
520,43 -> 525,43
505,65 -> 505,58 -> 505,65 -> 507,65 -> 507,55 -> 507,65 -> 509,65 -> 509,60 -> 509,65 -> 511,65 -> 511,56 -> 511,65 -> 513,65 -> 513,62 -> 513,65
"""
